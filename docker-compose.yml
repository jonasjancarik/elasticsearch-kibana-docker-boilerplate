---
version: "3.7"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    environment:
      ES_PASSWORD: ${ES_PASSWORD:?err}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:?err}
    command: >
      bash -c '
        if [ -z $ES_PASSWORD ]; then
          echo "Set the ES_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ -z $KIBANA_SYSTEM_PASSWORD ]; then
          echo "Set the KIBANA_SYSTEM_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        if [ -z $ES_SECURITY_ENABLED ] || [ $ES_SECURITY_ENABLED == false ]
        then
          until curl --output /dev/null --silent --head --fail http://es01:9200; do sleep 5; done;
        else
          until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 5; done;
        fi;
        if [ -z $ES_SECURITY_ENABLED ] || [ $ES_SECURITY_ENABLED == false ]
        then
          echo "Not setting kibana_system password because security is disabled";
        else
          echo "Setting kibana_system password";
          until curl -s -X POST --cacert config/certs/ca/ca.crt -u ${ES_USERNAME}:${ES_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_SYSTEM_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        fi;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT_HOST}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=${ES_SECURITY_ENABLED:-true}
      - xpack.security.http.ssl.enabled=${ES_SECURITY_ENABLED:-true}
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=${ES_SECURITY_ENABLED:-true}
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.ml.enabled=true
      - http.cors.enabled=${ES_CORS_ENABLED:-false}
      - http.cors.allow-origin="*"
      - http.cors.allow-methods=OPTIONS, HEAD, GET, POST, PUT, DELETE
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    mem_limit: ${MEM_LIMIT}
    command: >
      /bin/sh -c '
        if [ ! -z $ES_PLUGINS ]; then
            echo "Installing ES plugins: ${ES_PLUGINS}"
            IFS=", " read -r -a plugins <<< $ES_PLUGINS
            for plugin in "$${plugins[@]}"
            do
                bin/elasticsearch-plugin install $${plugin}
            done
        else
            echo "No ES plugins to install (ES_PLUGINS environment variable is not set)"
        fi

        /usr/local/bin/docker-entrypoint.sh
      '
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "if [ -z $ES_SECURITY_ENABLED ] || [ $ES_SECURITY_ENABLED == false ]; then curl --head --fail http://es01:9200; else curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q 'missing authentication credentials'; fi",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: "unless-stopped"

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.4.3
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      # uncomment the following volume to use a custom kibana.yml file,
      # e.g. to enable anonymous authentication
      # beware, without adjustments, this will give superuser access to anyone accessing Kibana
      # - type: bind
      #   source: ./kibana.yml
      #   target: /usr/share/kibana/config/kibana.yml
    ports:
      - ${KIBANA_PORT_HOST}:5601
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: ${ES_DOCKER_HOSTS:-}
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
      # The next two are the actual Elasticsearch superuser credentials used for anonymous authentication to Kibana
      ES_USERNAME: ${ES_USERNAME}  # usually 'elastic'
      ES_PASSWORD: ${ES_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    command: >
      /bin/sh -c '
        if [ x$${ELASTICSEARCH_HOSTS} = x ]; then
          if [ $ES_SECURITY_ENABLED = "true" ]; then
            echo "setting ELASTICSEARCH_HOSTS to https://es01:9200"
            export ELASTICSEARCH_HOSTS="https://es01:9200"
          else
            echo "setting ELASTICSEARCH_HOSTS to http://es01:9200"
            export ELASTICSEARCH_HOSTS="http://es01:9200"
          fi;
        else
          echo "using the supplied ELASTICSEARCH_HOSTS env var: $${ELASTICSEARCH_HOSTS}"
        fi;
        /usr/local/bin/kibana-docker
      '    
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -L -s -I http://localhost:5601 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: "unless-stopped"

  # tool:
  #   build: .
  #   environment:
  #     - FOO=${FOO}
  #   volumes:
  #     - certs:/app/certs
  #     - tooldata:/app/data
  #   depends_on:
  #     es01:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_healthy        
  #   stdin_open: true # docker run -i
  #   tty: true        # docker run -t
  #   restart: "unless-stopped"

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  # tooldata:
  #   driver: local